name: "Build and Push"

inputs:
  VERSION_MAJOR:
    required: true
  DATE_STAMP:
    required: true
  IMAGE_REGISTRY:
    required: true
  REGISTRY_USER:
    required: true
  REGISTRY_PASSWORD:
    required: true
  KMS_KEY_ALIAS:
    description: The AWS KMS alias to use for signing
    required: false
  AWS_ROLE_ARN:
    description: The AWS role ARN to assume for signing
    required: false
  AWS_REGION:
    description: The AWS region to use for signing
    required: false
runs:
  using: "composite"
  steps:
    - name: Prepare environment
      shell: bash
      run: |
        echo "VARIANT=--platform ${{ env.PLATFORM }}" >> "$GITHUB_ENV"

        # quay.io/almalinuxorg/almalinux-bootc
        IMAGE_DEST=${{ inputs.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
        echo "IMAGE_DEST=${IMAGE_DEST}" >> "$GITHUB_ENV"

        ARCH=${{ matrix.ARCH }}
        echo "CLEAN_ARCH=${ARCH//\//_}" >> "$GITHUB_ENV"

    - name: Log in to registry
      shell: bash
      run: |
        sudo podman login ${{ inputs.IMAGE_REGISTRY }} -u ${{ inputs.REGISTRY_USER }} -p ${{ inputs.REGISTRY_PASSWORD }}

        # This is needed by cosign
        docker login ${{ inputs.IMAGE_REGISTRY }} -u ${{ inputs.REGISTRY_USER }} -p ${{ inputs.REGISTRY_PASSWORD }}

    - name: Check update
      shell: bash
      run: |
        # 'dnf check-update'
        # exit codes:
        #   0 - no updates
        #   100 - updates available
        #   125 - tag/platform not found
        #   127 - command not found
        res=0
        sudo podman run ${{ env.VARIANT }} --quiet --rm ${{ inputs.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.VERSION_MAJOR }} dnf check-update || res=$?
        echo "res=${res}" >> "$GITHUB_ENV"
        echo "Exit code: '$res'"

    - name: Get info
      id: info
      if: ${{ env.res != 0 || github.event_name == 'workflow_dispatch' }}
      shell: bash
      run: |
        INFO=$(sudo podman run ${{ env.VARIANT }} --quiet --rm quay.io/almalinuxorg/${{ inputs.VERSION_MAJOR }}-base bash -c "dnf upgrade -y almalinux-release && rpm -q almalinux-gpg-keys && cat /etc/os-release" || true)
        echo "$INFO"

        echo "id=$(echo "$INFO" | grep "^ID=" | cut -d'=' -f2 | tr -d '"')" >> $GITHUB_OUTPUT
        echo "version-id=$(echo "$INFO" | grep "^VERSION_ID=" | cut -d'=' -f2 | tr -d '"')" >> $GITHUB_OUTPUT
        echo "long-version=$(echo "$INFO" | grep "^VERSION_ID=" | cut -d'=' -f2 | tr -d '"').${{ inputs.DATE_STAMP }}.0" >> $GITHUB_OUTPUT

    - name: Build image
      id: build
      if: ${{ env.res != 0 || github.event_name == 'workflow_dispatch' }}
      shell: bash
      run: |
        BUILD_TIME=$(date -Iseconds)

        # define a multiline variable with heredoc
        LABELS=$(cat <<EOF
        redhat.id=${{ steps.info.outputs.id }}
        redhat.version-id=${{ steps.info.outputs.version-id }}
        version=${{ steps.info.outputs.version-id }}
        release=${{ steps.info.outputs.version-id }}
        build-date=${BUILD_TIME}
        org.opencontainers.image.created=${BUILD_TIME}
        org.opencontainers.image.version=${{ steps.info.outputs.long-version }}
        org.opencontainers.image.source=${{ github.repositoryUrl }}
        org.opencontainers.image.title=${{ env.IMAGE_NAME }}
        org.opencontainers.image.url=${{ github.event.repository.html_url }}
        EOF
        )

        while IFS= read -r label; do
          ALL_LABELS="$ALL_LABELS --label=\"$label\" --annotation=\"$label\""
        done <<< "$LABELS"

        make image \
          PLATFORM=${{ env.PLATFORM }} \
          LABELS="${ALL_LABELS}" \
          IMAGE_NAME=${{ env.IMAGE_NAME }} \
          VERSION_MAJOR=${{ inputs.VERSION_MAJOR }}

        echo "image-id=$(cat /tmp/image-id)" >> $GITHUB_OUTPUT

    - name: rechunk image
      id: rechunk
      if: ${{ env.res != 0 || github.event_name == 'workflow_dispatch' }}
      shell: bash
      run: |
        make rechunk \
          PLATFORM=${{ env.PLATFORM }} \
          IMAGE_NAME=${{ env.IMAGE_NAME }}

        echo "image-id=sha256:$(sudo podman image inspect ${{ env.IMAGE_NAME }} -f "{{.Id}}")" >> $GITHUB_OUTPUT

    - name: Run Image
      id: run
      if: ${{ env.res != 0 || github.event_name == 'workflow_dispatch' }}
      shell: bash
      env:
        IMAGE_ID: ${{ steps.rechunk.outputs.image-id }}
      run: |
        sudo podman run ${{ env.VARIANT }} --rm -ti ${{ env.IMAGE_ID }} bootc --version

        INFO=$(sudo podman run ${{ env.VARIANT }} --rm ${{ env.IMAGE_ID }} bash -c "rpm -q almalinux-gpg-keys && cat /etc/os-release")
        echo "$INFO"

        echo "id=$(echo "$INFO" | grep "^ID=" | cut -d'=' -f2 | tr -d '"')" >> $GITHUB_OUTPUT
        echo "version-id=$(echo "$INFO" | grep "^VERSION_ID=" | cut -d'=' -f2 | tr -d '"')" >> $GITHUB_OUTPUT
        echo "long-version=$(echo "$INFO" | grep "^VERSION_ID=" | cut -d'=' -f2 | tr -d '"').${{ inputs.DATE_STAMP }}.0" >> $GITHUB_OUTPUT
        echo "vendor=$(echo "$INFO" | grep "^VENDOR_NAME=" | cut -d'=' -f2 | tr -d '"')" >> $GITHUB_OUTPUT

    - name: Push to registry
      id: push
      if: ${{ env.res != 0 || github.event_name == 'workflow_dispatch' }}
      env:
        IMAGE_ID: ${{ steps.rechunk.outputs.image-id }}
        VERSION: ${{ steps.run.outputs.version-id }}
      shell: bash
      run: |
        # The push fails for unknown reasons sometimes, so we'll retry it a few times
        for i in {1..5}; do
          sudo podman push --digestfile=/tmp/digestfile ${{ env.IMAGE_ID }} \
            docker://${IMAGE_DEST}:${{ env.VERSION }}-${{ inputs.DATE_STAMP }}-${{ env.CLEAN_ARCH }} && break || sleep $((10*i))
        done
        [ -f /tmp/digestfile ] || exit 1
        echo "digest=$(cat /tmp/digestfile)" >> $GITHUB_OUTPUT
        echo "image-ref=${IMAGE_DEST}:${{ env.VERSION }}-${{ inputs.DATE_STAMP }}-${{ env.CLEAN_ARCH }}" >> $GITHUB_OUTPUT
        sudo podman inspect ${{ env.IMAGE_ID }}

    - name: Sign Image
      if: ${{ github.event_name != 'pull_request' && (env.res != 0 || github.event_name == 'workflow_dispatch') }}
      uses: ./.github/actions/sign
      with:
        image-ref: ${{ steps.push.outputs.image-ref }}@${{ steps.push.outputs.digest }}
        KMS_KEY_ALIAS: ${{ inputs.KMS_KEY_ALIAS }}
        AWS_ROLE_ARN: ${{ inputs.AWS_ROLE_ARN }}
        AWS_REGION: ${{ inputs.AWS_REGION }}

    - name: Create Job Outputs
      if: ${{ env.res != 0 || github.event_name == 'workflow_dispatch' }}
      shell: bash
      run: |
        mkdir -p /tmp/outputs/digests

        jq -n --arg platform "${{ matrix.ARCH }}" \
          --arg major "${{ inputs.VERSION_MAJOR }}" \
          --arg digest "${{ steps.push.outputs.digest }}" \
          --arg id "${{ steps.run.outputs.id }}" \
          --arg version "${{ steps.run.outputs.version-id }}" \
          --arg long_version "${{ steps.run.outputs.long-version }}" \
          --arg vendor "${{ steps.run.outputs.vendor }}" \
          --arg image_id "${{ steps.rechunk.outputs.image-id }}" \
          '{($platform): {digest: $digest, id: $id, version: $version, major: $major, long_version: $long_version, vendor: $vendor, image_id: $image_id}}' \
          > /tmp/outputs/digests/${{ env.IMAGE_NAME }}_${{ matrix.VERSION_MAJOR }}_${{ env.CLEAN_ARCH }}.json

        cat /tmp/outputs/digests/${{ env.IMAGE_NAME }}_${{ matrix.VERSION_MAJOR }}_${{ env.CLEAN_ARCH }}.json

    - name: Upload Output Artifacts
      if: ${{ env.res != 0 || github.event_name == 'workflow_dispatch' }}
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: ${{ env.IMAGE_NAME }}_${{ matrix.VERSION_MAJOR }}_${{ env.CLEAN_ARCH }}
        retention-days: 1
        if-no-files-found: error
        path: |
          /tmp/outputs/digests/*.json
